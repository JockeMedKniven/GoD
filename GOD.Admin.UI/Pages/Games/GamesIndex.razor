

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Title</th>
            <th scope="col">Description</th>
            <th scope="col">Free</th>
            <th scope="col">Released</th>
            <th scope="col">How Long To Beat</th>
            <th scope="col">GameUrl</th>
            <th scope="col">Publisher</th>
            <th scope="col">Genre</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Description?.Truncate(50)</td>
                <td>@(item.Free ? "Free" : "")</td>
                <td>@item.Released</td>
                <td>@item.HowLongToBeat Hours</td>
                <td>@item.GameUrl</td>
                <td>@item.Publisher.Name</td>
                <td>@foreach (var genre in item.Genres) 
                    {
                        <p> @genre.Name</p>
                    }
                </td>

                <td>
                    <div class="d-flex me-1 justify-content-end">
                        <button class="btn btn-outline-primary rounded-0 me-1" @onclick="@(() => OnClick.InvokeAsync(new ClickModel(PageType.Edit, item.Id)))">Edit</button>
                        <button class="btn btn-outline-danger rounded-0" @onclick="@(() => OnClick.InvokeAsync(new ClickModel(PageType.Delete, item.Id)))">Delete</button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
@code {
    [Parameter] public List<GameDTO> Model { get; set; } = new();
    [Parameter] public EventCallback<ClickModel> OnClick { get; set; }
    List<GenreDTO> Genres { get; set; } = new ();
    //---------------------------------------------------------


}
